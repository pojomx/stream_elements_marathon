//MULTIPLIERS:
let fieldData;

let maxTime = new Date(); // Time cap you want to use
let minTime = new Date();
let addOnZero = false;
let stopOnZero = false;
let start;
let pausedAt = 0; // Stores the time at the PAUSE start. When Unpaused, will calculate the time difference 
				  // in seconds and add them to the countdown(dif).
let isPaused = false; 

function countdown(seconds) {
    //if (seconds == 0) return;
    let toCountDown = start;
    if (!isPaused && stopOnZero && toCountDown < new Date()) return;    
    toCountDown = calculateToCountdown(seconds);
  	if (isPaused) {
	  	pausedAt = +pausedAt + +seconds;
    }  
    start = toCountDown;
    $('#countdown').countdown(toCountDown, function (event) {
        if (event.type === "finish") $(this).html(fieldData.onComplete);
        else if (event.type === "stoped") { 
          $(this).html(event.strftime('%I:%M:%S') + " - " + fieldData.onPause);
        }
        else { 
          $(this).html(event.strftime('%I:%M:%S')); // event.type = "update"
          if(isPaused) {
              pausedAt += seconds;
              $('#countdown').countdown('pause');
              //autopausing after updating the value.
          }
        }
    });
    saveState();
}

function calculateToCountdown(seconds) {
  	let toCountDown = start;
  	if (addOnZero) {
        let a = [toCountDown, new Date()];
        a.sort(function (a, b) {
            return Date.parse(a) - Date.parse(b);
        });
        toCountDown = a[1];
    }
    toCountDown.setSeconds(toCountDown.getSeconds() + seconds);
    let a = [toCountDown, maxTime];
    a.sort(function (a, b) {
        return Date.parse(a) - Date.parse(b);
    });
    toCountDown = new Date(a[0].getTime());
  
  return toCountDown;
}

function calculateTimeDiff(timeEnd, timeStart) {
  let start = Math.trunc(timeStart.getTime() / 1000)
  let end = Math.trunc(timeEnd.getTime() / 1000)
  let dif = end - start; //milliseconds
  return dif;
}

function unpauseTimer() {
  let current = new Date();
  if(isPaused) {
    console.log("Unpause timer");
    console.log("start: " + start);
    console.log("unpausedAt: " + current);
    console.log("pausedAt: " + pausedAt);
    minTime = current;
    minTime.setSeconds(minTime.getSeconds() + pausedAt);
    start = minTime;
    isPaused = false;
    pausedAt = 0;
    countdown(0);    
  } 
}

function pauseTimer() {
  let current = new Date();
  if(!isPaused) {
    console.log("Pause timer");
    let toCountDown = calculateToCountdown(0);
    pausedAt = calculateTimeDiff(toCountDown, current)
    isPaused = true;
    console.log("current: " + current);    
    console.log("toCountDonw: " + toCountDown);
    console.log("pausedAt: " + pausedAt);
    // Pause the countdown
	$('#countdown').countdown('pause');
  } 
}

function setTimer(seconds) {
	console.log("secs: " + seconds);
    minTime = new Date();
    minTime.setSeconds(minTime.getSeconds() + seconds);
    maxTime = new Date();        
    maxTime.setMinutes(maxTime.getMinutes() + fieldData.maxTime);
    start = minTime;
    countdown(0); //just run it.
}
  
window.addEventListener('onEventReceived', function (obj) {
    const listener = obj.detail.listener;
    // Handling chat message
    if (listener === 'message') {
        console.log(obj.detail.event);
        const {text, nick, tags, channel} = obj.detail.event.data;
        const userstate = {
            'mod': parseInt(tags.mod),
            'sub': parseInt(tags.subscriber),
            'vip': (tags.badges.indexOf("vip") !== -1),
            'badges': {
                'broadcaster': (nick === channel),
            }
        };
        if (!(userstate.mod && fieldData['managePermissions'] === 'mods' || userstate.badges.broadcaster || fieldData.additionalUsers.includes(nick.toLowerCase()))) return;
        if (text.startsWith(fieldData.addTimeCommand)) {
            const seconds = parseFloat(text.split(' ')[1]) * 60;
            if (isNaN(seconds)) return;
         	countdown(seconds);
        } else if (text.startsWith(fieldData.pauseTimeCommand)) {
        	pauseTimer();
        } else if (text.startsWith(fieldData.unpauseTimeCommand)) {
        	unpauseTimer();
        } else if (text.startsWith(fieldData.setTimeCommand)) {
          
          const seconds = parseFloat(text.split(' ')[1]) * 60;
          if (isNaN(seconds)) return;
          isPaused = false;
	      pausedAt = 0;
          setTimer(seconds);    
    	}
      
        return;
    }
    // Handling widget buttons
    if (obj.detail.event) {
        if (obj.detail.event.listener === 'widget-button') {
            if (obj.detail.event.field === 'resetTimer') {
                minTime = new Date();
                minTime.setMinutes(minTime.getMinutes() + fieldData.minTime);
                maxTime = new Date();
                maxTime.setMinutes(maxTime.getMinutes() + fieldData.maxTime);
	            start = minTime;
    	        isPaused = false;
	            pausedAt = 0;
                countdown(1); 
            }
            if (obj.detail.event.field === 'addTime') {
                countdown(60);
            }
          	if (obj.detail.event.field === 'pauseTime') {
                pauseTimer();
            }
            if (obj.detail.event.field === 'unpauseTime') {
                unpauseTimer();
            }
            return;
        }
    } else if (listener.indexOf("-latest") === -1) return;

    const data = obj.detail.event;
    if (listener === 'follower-latest') {
        if (fieldData.followSeconds !== 0) countdown(fieldData.followSeconds);
    } else if (listener === 'subscriber-latest') {
        if (data.bulkGifted) { // Ignore gifting event and count only real subs
            return;
        }
        if (parseInt(data.tier) === 2000) {
            if (fieldData.sub2Seconds !== 0) countdown(fieldData.sub2Seconds);
        } else if (parseInt(data.tier) === 3000) {
            if (fieldData.sub3Seconds !== 0) countdown(fieldData.sub3Seconds);
        } else {
            if (fieldData.sub1Seconds !== 0) countdown(fieldData.sub1Seconds);
        }

    } else if (listener === 'host-latest') {
        if (data['amount'] < fieldData.hostMin || fieldData.hostSeconds === 0) {
            return;
        }
        countdown(fieldData.hostSeconds * data["amount"]);
    } else if (listener === 'raid-latest') {
        if (data['amount'] < fieldData.raidMin || fieldData.raidSeconds === 0) {
            return;
        }
        countdown(fieldData.raidSeconds * data["amount"]);
    } else if (listener === 'cheer-latest') {
        if (data['amount'] < fieldData.cheerMin || fieldData.cheerSeconds === 0) {
            return;
        }
        countdown(parseInt(fieldData.cheerSeconds * data["amount"] / 100));
    } else if (listener === 'tip-latest') {
        if (data['amount'] < fieldData.tipMin || fieldData.tipSeconds === 0) {
            return;
        }
        countdown(parseInt(fieldData.tipSeconds * data["amount"]));
    } else if (listener === 'merch-latest') {
        if (fieldData.merchSeconds === 0) {
            return;
        }
        countdown(parseInt(fieldData.merchSeconds * data["amount"]));
    }


});
window.addEventListener('onWidgetLoad', function (obj) {
    fieldData = obj.detail.fieldData;
    addOnZero = (fieldData.addOnZero === "add");
    stopOnZero = (fieldData.addOnZero === "stop");
    fieldData.additionalUsers = fieldData.additionalUsers.toLowerCase().split(',').map(el => el.trim());
    loadState();
});


function saveState() {
    SE_API.store.set('marathon', {current: start, maxTime: maxTime, minTime: minTime, pausedAt: pausedAt, isPaused: isPaused});
}

function loadState() {
    SE_API.store.get('marathon').then(obj => {
        if (obj !== null) {
            let current = new Date();
            if (fieldData.preserveTime === "save") {
                current = new Date(obj.current);
                minTime = new Date(obj.minTime);
                maxTime = new Date(obj.maxTime);
                pausedAt = new Date(obj.pausedAt);
                isPaused = obj.isPaused;
            } else if (fieldData.preserveTime === "restart") {
                minTime = new Date();
                current = minTime;
                minTime.setMinutes(minTime.getMinutes() + fieldData.minTime);
                maxTime = new Date();
                maxTime.setMinutes(maxTime.getMinutes() + fieldData.maxTime);
                start = minTime;
              	pausedAt = 0;
                isPaused = false;
            }
            if (current > 0) {
                current = Math.max(current, minTime);
                if(!isPaused) {
              		start = new Date(current);
                	countdown(1);
                } else {
                	start = minTime;
                	countdown(0);
                }
            } else {
                start = minTime;
                countdown(0);
            }
        } else {
            start = minTime;
            countdown(0);
        }
    });
}
